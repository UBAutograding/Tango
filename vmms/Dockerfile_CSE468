FROM ubuntu:bionic
MAINTAINER Zijian an <zijianan@buffalo.edu>

#C++ Setup
RUN apt-get update
RUN apt-get install -y gcc
RUN apt-get install -y make
RUN apt-get install -y build-essential
RUN apt-get install -y libcunit1-dev libcunit1-doc libcunit1

#Python Setup
RUN apt-get update --fix-missing && \
    DEBIAN_FRONTEND=nointeractive apt-get install -y \
    python3 python3-numpy python3-nose python3-pandas \
    python python-numpy python-nose python-pandas \
    pep8 python-pip python3-pip python-wheel \
    python-sphinx && \
    pip install --upgrade setuptools
	
#Java Setup
RUN apt-get update --fix-missing
RUN apt-get install -y default-jdk

#Valgrind Setup
RUN apt-get update
RUN apt-get install -y valgrind

#SML Setup
RUN mkdir -p /usr/local/bin/sml
WORKDIR /usr/local/bin/sml
RUN apt-get install -y gcc-multilib g++-multilib lib32z1 lib32ncurses5 wget
RUN wget http://www.smlnj.org/dist/working/110.78/config.tgz
RUN tar -xzvf config.tgz
RUN config/install.sh
RUN ln -s /usr/local/bin/sml/bin/sml /usr/local/sbin/sml
RUN ln -s /usr/local/bin/sml/bin/ml-lex /usr/local/sbin/ml-lex
RUN ln -s /usr/local/bin/sml/bin/ml-yacc /usr/local/sbin/ml-yacc

#Flex setup
RUN apt-get install -y flex

#Bison Setup
RUN apt-get install -y bison

#Utility setup
RUN apt-get install -y unzip

#NodeJS setup
RUN apt-get update --fix-missing
RUN apt-get install -y nodejs
RUN apt-get install -y npm

#OCaml Setup
RUN apt-get install -y ocaml

# Install autodriver
WORKDIR /home
RUN useradd autolab
RUN useradd autograde
RUN mkdir autolab autograde output
RUN chown autolab:autolab autolab
RUN chown autolab:autolab output
RUN chown autograde:autograde autograde
RUN apt-get update && apt-get install -y sudo 
RUN apt-get install -y git
RUN git clone https://github.com/autolab/Tango.git
WORKDIR Tango/autodriver
RUN make clean && make
RUN cp autodriver /usr/bin/autodriver
RUN chmod +s /usr/bin/autodriver

# Clean up
WORKDIR /home
RUN apt-get -y autoremove
RUN rm -rf Tango/

# Check installation
RUN ls -l /home
RUN which autodriver
RUN which javac
RUN which sml
RUN g++ --version

# setup timezone
RUN echo 'Etc/UTC' > /etc/timezone && \
    ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    apt-get update && \
    apt-get install -q -y --no-install-recommends tzdata && \
    rm -rf /var/lib/apt/lists/*

# install packages
RUN apt-get update && apt-get install -q -y --no-install-recommends \
    dirmngr \
    gnupg2 \
    build-essential \
    && rm -rf /var/lib/apt/lists/*
# setup keys
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

# setup sources.list
RUN echo "deb http://packages.ros.org/ros/ubuntu bionic main" > /etc/apt/sources.list.d/ros1-latest.list

# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

ENV ROS_DISTRO melodic

# install ros packages
RUN apt-get update && apt-get install -y --no-install-recommends \
    ros-melodic-desktop-full  \
    && rm -rf /var/lib/apt/lists/*

# setup entrypoint
COPY ./ros_entrypoint.sh /

ENTRYPOINT ["/ros_entrypoint.sh"]
RUN chmod +x ros_entrypoint.sh
CMD ["bash"]

#initial work_dic
ENV CATKIN_WS=/root/catkin_ws
RUN mkdir -p $CATKIN_WS/src
WORKDIR $CATKIN_WS

#copy submission
COPY ./lab1.tar.gz $CATKIN_WS/src/
RUN cd $CATKIN_WS/src
RUN tar -xzvf /root/catkin_ws/src/lab1.tar.gz -C /root/catkin_ws/src/

#catkin_make
RUN /bin/bash -c '. /opt/ros/melodic/setup.bash; cd $CATKIN_WS; catkin_make'
RUN sed --in-place --expression \
      '$isource "$CATKIN_WS/devel/setup.bash"' \
      /ros_entrypoint.sh
CMD ["roslaunch", "lab1 lab1.launch"]
